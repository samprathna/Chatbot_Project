{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2b81acf6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import pickle\n",
    "\n",
    "import nltk as nltk\n",
    "from nltk.corpus import stopwords\n",
    "from wordcloud import STOPWORDS\n",
    "\n",
    "import re\n",
    "import string\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer,CountVectorizer,TfidfTransformer\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "from tensorflow.keras.layers import Dense, Activation, Dropout, Embedding, GlobalAveragePooling1D, Flatten\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.optimizers import SGD\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from sklearn.model_selection import train_test_split\n",
    "import os.path"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "224778af",
   "metadata": {},
   "source": [
    "## Loading the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a89129b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>flags</th>\n",
       "      <th>utterance</th>\n",
       "      <th>category</th>\n",
       "      <th>intent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>BILC</td>\n",
       "      <td>I don't have an online account, what do I have...</td>\n",
       "      <td>ACCOUNT</td>\n",
       "      <td>create_account</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>BILQZ</td>\n",
       "      <td>can you tell me if i can regisger two accounts...</td>\n",
       "      <td>ACCOUNT</td>\n",
       "      <td>create_account</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>BPLC</td>\n",
       "      <td>I have no online account, open one, please</td>\n",
       "      <td>ACCOUNT</td>\n",
       "      <td>create_account</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>BIPLD</td>\n",
       "      <td>could you ask an agent how to open an account,...</td>\n",
       "      <td>ACCOUNT</td>\n",
       "      <td>create_account</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>BLQC</td>\n",
       "      <td>i want an online account, create one</td>\n",
       "      <td>ACCOUNT</td>\n",
       "      <td>create_account</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   flags                                          utterance category  \\\n",
       "0   BILC  I don't have an online account, what do I have...  ACCOUNT   \n",
       "1  BILQZ  can you tell me if i can regisger two accounts...  ACCOUNT   \n",
       "2   BPLC         I have no online account, open one, please  ACCOUNT   \n",
       "3  BIPLD  could you ask an agent how to open an account,...  ACCOUNT   \n",
       "4   BLQC               i want an online account, create one  ACCOUNT   \n",
       "\n",
       "           intent  \n",
       "0  create_account  \n",
       "1  create_account  \n",
       "2  create_account  \n",
       "3  create_account  \n",
       "4  create_account  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('train/data.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ecf6025f",
   "metadata": {},
   "source": [
    "## Selecting the classes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d742807c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intents that will be used: \n",
      "['change_order', 'check_invoices', 'contact_customer_service', 'contact_human_agent', 'create_account', 'get_invoice', 'get_refund', 'payment_issue', 'recover_password', 'track_order']\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# We will classifying the utterances into the 10 most populated intents\n",
    "grouped_df = df.groupby(['intent']).count().sort_values(['utterance'],ascending=False)\n",
    "top10_intents_df = grouped_df.copy()[:10]\n",
    "top27_intents_df = grouped_df.copy()[:27]\n",
    "\n",
    "used_intents = sorted(list(top10_intents_df.index.unique()))\n",
    "\n",
    "# print(top27_intents_df)\n",
    "print(f'Intents that will be used: \\n{used_intents}\\n')\n",
    "df = df.loc[df['intent'].isin(used_intents)].sort_values(['intent'], ascending=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1cd687e",
   "metadata": {},
   "source": [
    "## Creating the responses column\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c4b368bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>flags</th>\n",
       "      <th>utterance</th>\n",
       "      <th>category</th>\n",
       "      <th>intent</th>\n",
       "      <th>response</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6167</th>\n",
       "      <td>BIL</td>\n",
       "      <td>can you tell me what the mail address of Custo...</td>\n",
       "      <td>CONTACT</td>\n",
       "      <td>contact_customer_service</td>\n",
       "      <td>To contact customer service, you can call 1-80...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16347</th>\n",
       "      <td>BILQC</td>\n",
       "      <td>I have a problem when trying to pay with card,...</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>payment_issue</td>\n",
       "      <td>If you are having a payment issue, please cont...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20949</th>\n",
       "      <td>BIC</td>\n",
       "      <td>I need a refund, can you help me?</td>\n",
       "      <td>REFUNDS</td>\n",
       "      <td>get_refund</td>\n",
       "      <td>To get a refund, please log in and visit www.d...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20979</th>\n",
       "      <td>BIPLEC</td>\n",
       "      <td>I would like a refund, can I obtain one?</td>\n",
       "      <td>REFUNDS</td>\n",
       "      <td>get_refund</td>\n",
       "      <td>To get a refund, please log in and visit www.d...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7827</th>\n",
       "      <td>BILC</td>\n",
       "      <td>I can't understand you, what should I do to sp...</td>\n",
       "      <td>CONTACT</td>\n",
       "      <td>contact_human_agent</td>\n",
       "      <td>To contact a human agent, you can call 1-800-5...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12621</th>\n",
       "      <td>BQCZ</td>\n",
       "      <td>I wanna change my ordr, tell me how to do it</td>\n",
       "      <td>ORDER</td>\n",
       "      <td>change_order</td>\n",
       "      <td>To change your order, please log in and visit ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16691</th>\n",
       "      <td>BMLQD</td>\n",
       "      <td>ask an agent where i can notify problems with ...</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>payment_issue</td>\n",
       "      <td>If you are having a payment issue, please cont...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7464</th>\n",
       "      <td>BILQC</td>\n",
       "      <td>youre not helping, what should i do to speak w...</td>\n",
       "      <td>CONTACT</td>\n",
       "      <td>contact_human_agent</td>\n",
       "      <td>To contact a human agent, you can call 1-800-5...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10392</th>\n",
       "      <td>BIMW</td>\n",
       "      <td>can you give me information about my fucking i...</td>\n",
       "      <td>INVOICES</td>\n",
       "      <td>check_invoices</td>\n",
       "      <td>To check your invoices, please log in and visi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6706</th>\n",
       "      <td>BIPLQD</td>\n",
       "      <td>can u ask an agent if i can send an email to c...</td>\n",
       "      <td>CONTACT</td>\n",
       "      <td>contact_customer_service</td>\n",
       "      <td>To contact customer service, you can call 1-80...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        flags                                          utterance  category  \\\n",
       "6167      BIL  can you tell me what the mail address of Custo...   CONTACT   \n",
       "16347   BILQC  I have a problem when trying to pay with card,...   PAYMENT   \n",
       "20949     BIC                  I need a refund, can you help me?   REFUNDS   \n",
       "20979  BIPLEC           I would like a refund, can I obtain one?   REFUNDS   \n",
       "7827     BILC  I can't understand you, what should I do to sp...   CONTACT   \n",
       "12621    BQCZ       I wanna change my ordr, tell me how to do it     ORDER   \n",
       "16691   BMLQD  ask an agent where i can notify problems with ...   PAYMENT   \n",
       "7464    BILQC  youre not helping, what should i do to speak w...   CONTACT   \n",
       "10392    BIMW  can you give me information about my fucking i...  INVOICES   \n",
       "6706   BIPLQD  can u ask an agent if i can send an email to c...   CONTACT   \n",
       "\n",
       "                         intent  \\\n",
       "6167   contact_customer_service   \n",
       "16347             payment_issue   \n",
       "20949                get_refund   \n",
       "20979                get_refund   \n",
       "7827        contact_human_agent   \n",
       "12621              change_order   \n",
       "16691             payment_issue   \n",
       "7464        contact_human_agent   \n",
       "10392            check_invoices   \n",
       "6706   contact_customer_service   \n",
       "\n",
       "                                                response  \n",
       "6167   To contact customer service, you can call 1-80...  \n",
       "16347  If you are having a payment issue, please cont...  \n",
       "20949  To get a refund, please log in and visit www.d...  \n",
       "20979  To get a refund, please log in and visit www.d...  \n",
       "7827   To contact a human agent, you can call 1-800-5...  \n",
       "12621  To change your order, please log in and visit ...  \n",
       "16691  If you are having a payment issue, please cont...  \n",
       "7464   To contact a human agent, you can call 1-800-5...  \n",
       "10392  To check your invoices, please log in and visi...  \n",
       "6706   To contact customer service, you can call 1-80...  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff_responses = ['To change your order, please log in and visit www.dummysite.com/change_order. These are the elligibility conditions: \\n 1) ... \\n 2) ... \\n etc.',\n",
    " 'To check your invoices, please log in and visit www.dummysite.com/check_invoices. You have access to the previous 24 detailed invoices.',\n",
    " 'To contact customer service, you can call 1-800-555-1234 from Monday to Friday, 9:00AM - 5:00PM EST.',\n",
    " 'To contact a human agent, you can call 1-800-555-1234 from Monday to Friday, 9:00AM - 5:00PM EST.',\n",
    " 'You asked to create a new account.',\n",
    " 'To get an invoice, please have your personal information ready along with your order details and call 1-800-555-1234',\n",
    " 'To get a refund, please log in and visit www.dummysite.com/refund. You will be asked to provide the reason of your refund.',\n",
    " 'If you are having a payment issue, please contact our billing department at 1-800-555-1234.',\n",
    " 'You asked to recover your password.',\n",
    " 'You can track your packages on https://www.purolator.com/en/shipping/tracker . Have your PIN or reference number ready.']\n",
    "\n",
    "intents_responses = dict(zip(used_intents, diff_responses))\n",
    "index_responses = dict(zip(list(range(20)), diff_responses))\n",
    "\n",
    "intents = list(df['intent'])\n",
    "\n",
    "allresponses = []\n",
    "for intent in intents:\n",
    "    allresponses.append(intents_responses[intent])\n",
    "    \n",
    "df['response'] = allresponses\n",
    "df.sample(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ebd71f5f",
   "metadata": {},
   "source": [
    "## Pre-processing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "27cac841",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>flags</th>\n",
       "      <th>utterance</th>\n",
       "      <th>category</th>\n",
       "      <th>intent</th>\n",
       "      <th>response</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>18617</th>\n",
       "      <td>BD</td>\n",
       "      <td>ask agent report payment issue</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>payment_issue</td>\n",
       "      <td>If you are having a payment issue, please cont...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16648</th>\n",
       "      <td>BILQD</td>\n",
       "      <td>u ask agent inform problem payment</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>payment_issue</td>\n",
       "      <td>If you are having a payment issue, please cont...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9950</th>\n",
       "      <td>BMSLC</td>\n",
       "      <td>receive bill want view</td>\n",
       "      <td>INVOICES</td>\n",
       "      <td>check_invoices</td>\n",
       "      <td>To check your invoices, please log in and visi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17815</th>\n",
       "      <td>BILC</td>\n",
       "      <td>want notify issue payment</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>payment_issue</td>\n",
       "      <td>If you are having a payment issue, please cont...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13050</th>\n",
       "      <td>BLQC</td>\n",
       "      <td>ordered product wanna modify purchase</td>\n",
       "      <td>ORDER</td>\n",
       "      <td>change_order</td>\n",
       "      <td>To change your order, please log in and visit ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15351</th>\n",
       "      <td>BIMLQD</td>\n",
       "      <td>u ask agent inform issue making payment</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>payment_issue</td>\n",
       "      <td>If you are having a payment issue, please cont...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14422</th>\n",
       "      <td>BLC</td>\n",
       "      <td>want track package tell</td>\n",
       "      <td>ORDER</td>\n",
       "      <td>track_order</td>\n",
       "      <td>You can track your packages on https://www.pur...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20432</th>\n",
       "      <td>BIC</td>\n",
       "      <td>want refund</td>\n",
       "      <td>REFUNDS</td>\n",
       "      <td>get_refund</td>\n",
       "      <td>To get a refund, please log in and visit www.d...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10574</th>\n",
       "      <td>B</td>\n",
       "      <td>need information invoice</td>\n",
       "      <td>INVOICES</td>\n",
       "      <td>check_invoices</td>\n",
       "      <td>To check your invoices, please log in and visi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5647</th>\n",
       "      <td>BILC</td>\n",
       "      <td>want information talk customer service</td>\n",
       "      <td>CONTACT</td>\n",
       "      <td>contact_customer_service</td>\n",
       "      <td>To contact customer service, you can call 1-80...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        flags                                utterance  category  \\\n",
       "18617      BD           ask agent report payment issue   PAYMENT   \n",
       "16648   BILQD       u ask agent inform problem payment   PAYMENT   \n",
       "9950    BMSLC                   receive bill want view  INVOICES   \n",
       "17815    BILC                want notify issue payment   PAYMENT   \n",
       "13050    BLQC    ordered product wanna modify purchase     ORDER   \n",
       "15351  BIMLQD  u ask agent inform issue making payment   PAYMENT   \n",
       "14422     BLC                  want track package tell     ORDER   \n",
       "20432     BIC                              want refund   REFUNDS   \n",
       "10574       B                 need information invoice  INVOICES   \n",
       "5647     BILC   want information talk customer service   CONTACT   \n",
       "\n",
       "                         intent  \\\n",
       "18617             payment_issue   \n",
       "16648             payment_issue   \n",
       "9950             check_invoices   \n",
       "17815             payment_issue   \n",
       "13050              change_order   \n",
       "15351             payment_issue   \n",
       "14422               track_order   \n",
       "20432                get_refund   \n",
       "10574            check_invoices   \n",
       "5647   contact_customer_service   \n",
       "\n",
       "                                                response  \n",
       "18617  If you are having a payment issue, please cont...  \n",
       "16648  If you are having a payment issue, please cont...  \n",
       "9950   To check your invoices, please log in and visi...  \n",
       "17815  If you are having a payment issue, please cont...  \n",
       "13050  To change your order, please log in and visit ...  \n",
       "15351  If you are having a payment issue, please cont...  \n",
       "14422  You can track your packages on https://www.pur...  \n",
       "20432  To get a refund, please log in and visit www.d...  \n",
       "10574  To check your invoices, please log in and visi...  \n",
       "5647   To contact customer service, you can call 1-80...  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Some pre-processing steps\n",
    "df['utterance'] = df['utterance'].apply(lambda x: x.lower()) #Switch to lower case\n",
    "df['utterance'] = df['utterance'].apply(lambda x: re.sub(\"[0-9]\",\"\", x)) #removing numbers\n",
    "df['utterance'] = df['utterance'].apply(lambda x: x.replace('?', '')) #removing question marks\n",
    "df['utterance'] = df['utterance'].apply(lambda x: x.replace(',', '')) #removing commas\n",
    "df['utterance'] = df['utterance'].apply(lambda x: re.sub(\"  \",\" \", x)) #removing double whitespaces\n",
    "df['utterance'] = df['utterance'].apply(lambda x: x.split(' ')) # transforming utterances into lists of words.\n",
    "\n",
    "# Removing stopwords\n",
    "nltk_stopwords = stopwords.words('english')\n",
    "stopwords = list(STOPWORDS)\n",
    "for word in nltk_stopwords:\n",
    "    if word not in stopwords:\n",
    "        stopwords.append(word)\n",
    "df['utterance'] = df['utterance'].apply(lambda words: [word for word in words if word not in nltk_stopwords])\n",
    "\n",
    "# Removing punctuation, if any\n",
    "punctuation = set(string.punctuation)\n",
    "df['utterance'] = df['utterance'].apply(lambda words: [word for word in words if word not in punctuation])\n",
    "\n",
    "# Lemmatizing\n",
    "lemmatizer = WordNetLemmatizer()\n",
    "\n",
    "lemma_utterances = []\n",
    "for utterance in df['utterance']:\n",
    "    lemmatized = []\n",
    "    for word in utterance:\n",
    "        lemmatized.append(lemmatizer.lemmatize(word.strip('“')))\n",
    "    lemma_utterances.append(lemmatized)\n",
    "\n",
    "df['utterance'] = lemma_utterances\n",
    "df['utterance'] = df['utterance'].apply(lambda x: ' '.join(x))\n",
    "df.sample(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fd88f37",
   "metadata": {},
   "source": [
    "## Preparing our training/testing data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "baa42fb8",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1451\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, ..., 9, 9, 9])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "words = []\n",
    "for index, row in df.iterrows():\n",
    "    for word in row['utterance'].split():\n",
    "        words.append(word)\n",
    "print(len(set(words)))\n",
    "# There are 1451 unique words in the utterances. We will keep 1000\n",
    "\n",
    "sentences = list(df['utterance']) # our X\n",
    "labels = list(df['intent'])       # our y\n",
    "\n",
    "label_encoder = LabelEncoder()\n",
    "label_encoder.fit(labels)\n",
    "encoded_labels = label_encoder.transform(labels)\n",
    "encoded_labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cd4ae012",
   "metadata": {},
   "outputs": [],
   "source": [
    "vocab_size = 1024 # We keep the 1024 most used ones\n",
    "embedding_dim = 16\n",
    "max_len = 10\n",
    "oov_token = \"<OOV>\"\n",
    "num_classes = 10\n",
    "\n",
    "tokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_token)\n",
    "tokenizer.fit_on_texts(sentences)\n",
    "word_index = tokenizer.word_index\n",
    "sequences = tokenizer.texts_to_sequences(sentences)\n",
    "padded_sequences = pad_sequences(sequences, truncating='post', maxlen=max_len)\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(padded_sequences, encoded_labels, test_size=0.1, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9b7efc81",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(14668, 10)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c719041",
   "metadata": {},
   "source": [
    "## The Neural Network model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b37c15f7",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " embedding (Embedding)       (None, 10, 16)            16384     \n",
      "                                                                 \n",
      " flatten (Flatten)           (None, 160)               0         \n",
      "                                                                 \n",
      " dense (Dense)               (None, 32)                5152      \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 16)                528       \n",
      "                                                                 \n",
      " dropout (Dropout)           (None, 16)                0         \n",
      "                                                                 \n",
      " dense_2 (Dense)             (None, 10)                170       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 22,234\n",
      "Trainable params: 22,234\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "model.add(Embedding(vocab_size, embedding_dim, input_length=max_len))\n",
    "# model.add(GlobalAveragePooling1D())\n",
    "model.add(Flatten())\n",
    "model.add(Dense(32, activation='relu'))\n",
    "model.add(Dense(16, activation='relu'))\n",
    "model.add(Dropout(0.5))\n",
    "model.add(Dense(10, activation='softmax'))\n",
    "\n",
    "model.compile(loss='sparse_categorical_crossentropy', \n",
    "              optimizer='adam', metrics=['accuracy'])\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "93844b5a",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "1467/1467 [==============================] - 3s 1ms/step - loss: 0.8617 - accuracy: 0.6771 - val_loss: 0.0949 - val_accuracy: 0.9779\n",
      "Epoch 2/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.3755 - accuracy: 0.8519 - val_loss: 0.0442 - val_accuracy: 0.9877\n",
      "Epoch 3/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.3057 - accuracy: 0.8808 - val_loss: 0.0357 - val_accuracy: 0.9871\n",
      "Epoch 4/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.2673 - accuracy: 0.8968 - val_loss: 0.0338 - val_accuracy: 0.9877\n",
      "Epoch 5/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.2334 - accuracy: 0.9125 - val_loss: 0.0337 - val_accuracy: 0.9877\n",
      "Epoch 6/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.1976 - accuracy: 0.9308 - val_loss: 0.0346 - val_accuracy: 0.9877\n",
      "Epoch 7/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.1854 - accuracy: 0.9347 - val_loss: 0.0241 - val_accuracy: 0.9908\n",
      "Epoch 8/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.1710 - accuracy: 0.9407 - val_loss: 0.0271 - val_accuracy: 0.9926\n",
      "Epoch 9/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.1632 - accuracy: 0.9439 - val_loss: 0.0284 - val_accuracy: 0.9914\n",
      "Epoch 10/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.1646 - accuracy: 0.9451 - val_loss: 0.0302 - val_accuracy: 0.9883\n",
      "Epoch 11/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.1573 - accuracy: 0.9450 - val_loss: 0.0292 - val_accuracy: 0.9890\n",
      "Epoch 12/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.1507 - accuracy: 0.9498 - val_loss: 0.0298 - val_accuracy: 0.9890\n",
      "Epoch 13/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.1469 - accuracy: 0.9509 - val_loss: 0.0338 - val_accuracy: 0.9908\n",
      "Epoch 14/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.1386 - accuracy: 0.9544 - val_loss: 0.0393 - val_accuracy: 0.9896\n",
      "Epoch 15/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.1415 - accuracy: 0.9536 - val_loss: 0.0327 - val_accuracy: 0.9896\n",
      "Epoch 16/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.1463 - accuracy: 0.9532 - val_loss: 0.0269 - val_accuracy: 0.9890\n",
      "Epoch 17/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.1449 - accuracy: 0.9531 - val_loss: 0.0344 - val_accuracy: 0.9890\n",
      "Epoch 18/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.1357 - accuracy: 0.9575 - val_loss: 0.0308 - val_accuracy: 0.9896\n",
      "Epoch 19/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.1340 - accuracy: 0.9577 - val_loss: 0.0315 - val_accuracy: 0.9890\n",
      "Epoch 20/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.1388 - accuracy: 0.9562 - val_loss: 0.0333 - val_accuracy: 0.9890\n",
      "Epoch 21/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.1332 - accuracy: 0.9590 - val_loss: 0.0322 - val_accuracy: 0.9908\n",
      "Epoch 22/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.1292 - accuracy: 0.9617 - val_loss: 0.0335 - val_accuracy: 0.9890\n",
      "Epoch 23/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.1268 - accuracy: 0.9596 - val_loss: 0.0369 - val_accuracy: 0.9890\n",
      "Epoch 24/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.1130 - accuracy: 0.9656 - val_loss: 0.0305 - val_accuracy: 0.9890\n",
      "Epoch 25/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.1275 - accuracy: 0.9615 - val_loss: 0.0394 - val_accuracy: 0.9896\n",
      "Epoch 26/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.1175 - accuracy: 0.9638 - val_loss: 0.0332 - val_accuracy: 0.9908\n",
      "Epoch 27/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.1171 - accuracy: 0.9653 - val_loss: 0.0355 - val_accuracy: 0.9908\n",
      "Epoch 28/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.1142 - accuracy: 0.9645 - val_loss: 0.0363 - val_accuracy: 0.9883\n",
      "Epoch 29/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.1137 - accuracy: 0.9646 - val_loss: 0.0410 - val_accuracy: 0.9883\n",
      "Epoch 30/30\n",
      "1467/1467 [==============================] - 2s 1ms/step - loss: 0.1193 - accuracy: 0.9633 - val_loss: 0.0353 - val_accuracy: 0.9890\n"
     ]
    }
   ],
   "source": [
    "epochs = 30\n",
    "batch_size = 10\n",
    "model10 = model.fit(X_train, y_train , epochs=epochs, batch_size = batch_size, verbose=1, validation_data=(X_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fab826be",
   "metadata": {},
   "source": [
    "## Saves"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "588ec863",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------\n",
      "Error. The path already contains a file.\n",
      "----------\n",
      "Done\n"
     ]
    }
   ],
   "source": [
    "# Pickle files \n",
    "\n",
    "index_responses = dict(zip(list(range(10)), diff_responses))\n",
    "pickle.dump(index_responses, open('index_responses.pkl', 'wb'))\n",
    "pickle.dump(tokenizer, open('tokenizer.pkl', 'wb'))\n",
    "pickle.dump(stopwords, open('stopwords.pkl', 'wb'))\n",
    "pickle.dump(lemmatizer, open('lemmatizer.pkl', 'wb'))\n",
    "\n",
    "\n",
    "# Model\n",
    "PATH = 'chatbotmodel.h5'\n",
    "if os.path.isfile(PATH) is False:\n",
    "    model.save(PATH)\n",
    "    print('Model saved successfully.')\n",
    "else:\n",
    "    print('----------\\nError. The path already contains a file.\\n----------')\n",
    "\n",
    "print('Done')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9ce03764",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: 'To change your order, please log in and visit www.dummysite.com/change_order. These are the elligibility conditions: \\n 1) ... \\n 2) ... \\n etc.',\n",
       " 1: 'To check your invoices, please log in and visit www.dummysite.com/check_invoices. You have access to the previous 24 detailed invoices.',\n",
       " 2: 'To contact customer service, you can call 1-800-555-1234 from Monday to Friday, 9:00AM - 5:00PM EST.',\n",
       " 3: 'To contact a human agent, you can call 1-800-555-1234 from Monday to Friday, 9:00AM - 5:00PM EST.',\n",
       " 4: 'You asked to create a new account.',\n",
       " 5: 'To get an invoice, please have your personal information ready along with your order details and call 1-800-555-1234',\n",
       " 6: 'To get a refund, please log in and visit www.dummysite.com/refund. You will be asked to provide the reason of your refund.',\n",
       " 7: 'If you are having a payment issue, please contact our billing department at 1-800-555-1234.',\n",
       " 8: 'You asked to recover your password.',\n",
       " 9: 'You can track your packages on https://www.purolator.com/en/shipping/tracker . Have your PIN or reference number ready.'}"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "index_responses"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63f62ce6",
   "metadata": {},
   "source": [
    "## Testing the chatbot - mini version"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "49a57288",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The chatbot is running. Type something\n",
      "i want to contact a human\n",
      "To contact a human agent, you can call 1-800-555-1234 from Monday to Friday, 9:00AM - 5:00PM EST.\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "Interrupted by user",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp/ipykernel_34628/1640657767.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     17\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     18\u001b[0m \u001b[1;32mwhile\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 19\u001b[1;33m     \u001b[0muser_input\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0minput\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m''\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     20\u001b[0m     \u001b[0mpredicted\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mprediction\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0muser_input\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     21\u001b[0m     \u001b[0mres\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mget_response\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpredicted\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mindex_responses\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\ipykernel\\kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[1;34m(self, prompt)\u001b[0m\n\u001b[0;32m   1004\u001b[0m                 \u001b[1;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1005\u001b[0m             )\n\u001b[1;32m-> 1006\u001b[1;33m         return self._input_request(\n\u001b[0m\u001b[0;32m   1007\u001b[0m             \u001b[0mstr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mprompt\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1008\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"shell\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\ipykernel\\kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[1;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[0;32m   1049\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1050\u001b[0m                 \u001b[1;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1051\u001b[1;33m                 \u001b[1;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Interrupted by user\"\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1052\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1053\u001b[0m                 \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Invalid Message:\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
     ]
    }
   ],
   "source": [
    "def prediction(user_input):\n",
    "    sequenced_input = tokenizer.texts_to_sequences([user_input])\n",
    "    padded_input = pad_sequences(sequenced_input, truncating='post', maxlen=max_len)\n",
    "    result = model.predict(padded_input)\n",
    "    results = {}\n",
    "    for i in range(len(result[0])):\n",
    "        results[i] = model.predict(padded_input)[0][i]\n",
    "    sorted_results = {k: v for k, v in sorted(results.items(), key=lambda item: item[1], reverse=True)}\n",
    "    list_results = list(sorted_results)\n",
    "    predicted_class_index = int(list_results[0])\n",
    "    return predicted_class_index\n",
    "\n",
    "def get_response(input_class, responses):\n",
    "    return responses[input_class]\n",
    "\n",
    "print('The chatbot is running. Type something')\n",
    "\n",
    "while True:\n",
    "    user_input = input('')\n",
    "    predicted = prediction(user_input)\n",
    "    res = get_response(predicted, index_responses)\n",
    "    print(res)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
